<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<bns:Component xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bns="http://api.platform.boomi.com/" folderFullPath="Presales Demo/BOOMI PSLABS/6.Solutions Demo Library/Boomi DevOps Center/##Boomi DevOps Center 2020-11-22" componentId="0a64e1b1-8905-4bcb-b912-dd92654ce864" version="1" name="Test Point" type="script.processing" createdDate="2020-11-21T15:40:19Z" createdBy="dave.hock@dell.com" modifiedDate="2020-11-21T15:40:19Z" modifiedBy="dave.hock@dell.com" deleted="false" currentVersion="true" folderName="##Boomi DevOps Center 2020-11-22" folderId="RjozNjYzMzk2" copiedFromComponentId="4a7b4272-d907-47d1-9a01-c98bfe44a862" copiedFromComponentVersion="15">
  <bns:encryptedValues/>
  <bns:description>CICD_TEST_MODE
CICD_POINT_ID
CICD_API_ENDPOINT
CICD_TEST_ID</bns:description>
  <bns:object>
    <ProcessingScript xmlns="" language="groovy2">
      <script>import java.util.Properties;&#13;
import java.io.InputStream;&#13;
import com.boomi.execution.ExecutionManager;&#13;
import com.boomi.execution.ExecutionUtil;&#13;
import com.boomi.execution.ExecutionTask;&#13;
import java.net.HttpURLConnection;&#13;
import java.net.URL;&#13;
import java.io.ByteArrayInputStream;&#13;
import java.util.logging.Logger;&#13;
import java.util.Set;&#13;
import groovy.json.JsonSlurper;&#13;
import org.json.JSONArray;&#13;
import org.json.JSONObject;&#13;
&#13;
Logger logger = ExecutionUtil.getBaseLogger();&#13;
String CICD_TEST_MODE = ExecutionUtil.getDynamicProcessProperty("CICD_TEST_MODE");&#13;
if (CICD_TEST_MODE!=null &amp;&amp; CICD_TEST_MODE.trim().size()&gt;0 &amp;&amp; CICD_TEST_MODE!="null")&#13;
{&#13;
 	String GETEXPECTEDPROCESSPROPERTIES = "getExpectedProcessProperties";&#13;
	String EXECUTETESTPOINTASSERTION = "executeTestPointAssertion";&#13;
	String CREATEEXPECTEDDOCUMENT = "createExpectedDocument";&#13;
	String defaultApiServer = "http://localhost:9090/ws/simple/";&#13;
    &#13;
    if (ExecutionUtil.getDynamicProcessProperty("CICD_APIM")=="true")&#13;
    {&#13;
        GETEXPECTEDPROCESSPROPERTIES = "ExpectedProcessProperties/"; &#13;
        EXECUTETESTPOINTASSERTION = "TestPointAssertion/"; &#13;
        CREATEEXPECTEDDOCUMENT = "ExpectedDocument/";&#13;
        defaultApiServer = "http://localhost:9090/ws/rest/boomidevopscenter/";&#13;
    }&#13;
	&#13;
	String apiServer = ExecutionUtil.getDynamicProcessProperty("CICD_API_ENDPOINT");&#13;
	if (apiServer==null || apiServer.size()==0)&#13;
	    apiServer = defaultApiServer;&#13;
&#13;
 	/***Build authentication***/&#13;
	String userName = ExecutionUtil.getDynamicProcessProperty("CICD_USERNAME");&#13;
    String token = ExecutionUtil.getDynamicProcessProperty("CICD_TOKEN");   &#13;
    &#13;
    if (userName==null || userName.size()==0)&#13;
        throw new Exception("CICD_USERNAME must be specified");&#13;
    if (token==null || token.size()==0)&#13;
        throw new Exception("CICD_TOKEN must be specified.");&#13;
    String userpass = userName+":"+token;&#13;
	String authenticationHeader = "Basic " +  userpass.bytes.encodeBase64().toString();&#13;
	&#13;
	/***Get Point ID ***/&#13;
    String _boomi_debug = ExecutionUtil.getDynamicProcessProperty("_boomi_debug");&#13;
    String pointIdStr = ExecutionUtil.getDynamicProcessProperty("CICD_POINT_ID");&#13;
	if (pointIdStr==null || pointIdStr.size()==0)&#13;
        throw new Exception("CICD_POINT_ID must be set to the ID value from the Test Portal");&#13;
    int pointId=pointIdStr.toInteger()&#13;
    &#13;
 	//***Find the true parent processId&#13;
    ExecutionTask execCurrent = ExecutionManager.getCurrent(); &#13;
    while(execCurrent.getParent()!=null)&#13;
        execCurrent=execCurrent.getParent();&#13;
&#13;
    //if in a child process launched from a Flow Control thread, we may want to set processId manually from the deployed parent process&#13;
 	String processId = ExecutionUtil.getDynamicProcessProperty("CICD_PARENT_PROCESS_ID");&#13;
	if (processId==null || processId.size()==0)&#13;
	    processId = execCurrent.getProcessId();&#13;
&#13;
    //if in a child process launched from a Flow Control thread, we may want to set processId manually from the deployed parent process&#13;
 	String executionId = ExecutionUtil.getDynamicProcessProperty("CICD_PARENT_EXECUTION_ID");&#13;
	if (executionId==null || executionId.size()==0)&#13;
	    executionId = execCurrent.getExecutionId();&#13;
	&#13;
    //***persist the number of times this test point has been visited***/&#13;
    String visitIndexDPPName = "VISITINDEX_" + pointId;&#13;
    String visitIndexDPP = ExecutionUtil.getDynamicProcessProperty(visitIndexDPPName);&#13;
    long visitIndex=0;&#13;
    if (visitIndexDPP!=null &amp;&amp; visitIndexDPP.size()&gt;0)&#13;
        visitIndex=visitIndexDPP.toInteger();&#13;
    ExecutionUtil.setDynamicProcessProperty(visitIndexDPPName, (visitIndex+1)+"", false);&#13;
&#13;
    String testIdStr = ExecutionUtil.getDynamicProcessProperty("CICD_TEST_ID");&#13;
    int testId=0;&#13;
    if (testIdStr!=null &amp;&amp; testIdStr.size()&gt;0)&#13;
        testId=testIdStr.toInteger();&#13;
        &#13;
	String urlString = apiServer + GETEXPECTEDPROCESSPROPERTIES;&#13;
	//Get processProperties&#13;
	//First get process process properties so we can use the names to capture mock/expected data&#13;
	urlString+="?processId=" + processId+"&amp;testPointId="+pointId+"&amp;visitIndex="+visitIndex;&#13;
	urlString+="&amp;testId=" + testId;&#13;
	if (_boomi_debug=="true")&#13;
		urlString+="&amp;_boomi_debug=true";&#13;
	def processProperties;&#13;
	if (CICD_TEST_MODE != "CAPTUREDOCSONLY" &amp;&amp; CICD_TEST_MODE != "TESTDOCSONLY")&#13;
	    processProperties = getProcessPropertyNames(urlString, authenticationHeader, logger);&#13;
&#13;
    if (CICD_TEST_MODE == "TEST" || CICD_TEST_MODE == "TESTDOCSONLY") {&#13;
        urlString = apiServer + EXECUTETESTPOINTASSERTION;&#13;
    	def report = postDocuments(urlString, dataContext, authenticationHeader, pointId, testId, processId, executionId, logger, processProperties, visitIndex, _boomi_debug, CICD_TEST_MODE);&#13;
		&#13;
		if (report=="BREAKPOINT")&#13;
		    throw new Exception ("Breakpoint reached");&#13;
		else if (report!="OK")&#13;
		{&#13;
			def compareMsg = String.format(report);&#13;
			logger.severe(compareMsg);&#13;
			//Throw if testId null aka running in Build Tab&#13;
            if (testId==0)&#13;
                throw new Exception(compareMsg);&#13;
		}&#13;
		else&#13;
			logger.info(String.format("Compare OK Test ID: %s Test Point ID: %s %s", testId, pointId, report));&#13;
    } else if (CICD_TEST_MODE == "CAPTURE" || CICD_TEST_MODE == "CAPTUREDOCSONLY") {&#13;
        urlString = apiServer + CREATEEXPECTEDDOCUMENT;&#13;
		postDocuments(urlString, dataContext, authenticationHeader, pointId, testId, processId, executionId, logger, processProperties, visitIndex, _boomi_debug, CICD_TEST_MODE);&#13;
    } else {&#13;
        throw new Exception("Unknown CICD_TEST_MODE mode value:" + CICD_TEST_MODE)&#13;
    }&#13;
} else {&#13;
    //This is what we do FAST to pass through when not TEST nor CAPTURE&#13;
    for( int i = 0; i &lt; dataContext.getDataCount(); i++ ) {&#13;
        InputStream is = dataContext.getStream(i);&#13;
        Properties props = dataContext.getProperties(i);&#13;
        dataContext.storeStream(is, props);&#13;
    }    &#13;
}&#13;
&#13;
String postDocuments(String urlString, com.boomi.document.scripting.DataContextImpl dataContext, String authenticationHeader&#13;
, int pointId, int testId, String processId, String executionId&#13;
, Logger logger, def processProperties, long visitIndex, String _boomi_debug, String CICD_TEST_MODE)&#13;
{&#13;
	def payloadJSON = new JSONObject();&#13;
	def documents = new JSONArray();&#13;
	payloadJSON.put("pointId", pointId);&#13;
	payloadJSON.put("processId", processId);&#13;
	payloadJSON.put("visitIndex", visitIndex);&#13;
	payloadJSON.put("executionId", executionId);&#13;
	payloadJSON.put("testSuiteExecutionId", ExecutionUtil.getDynamicProcessProperty("CICD_SUITE_EXECUTION_ID"));&#13;
	payloadJSON.put("testId", testId);&#13;
	payloadJSON.put("documents", documents);&#13;
	payloadJSON.put("testMode", CICD_TEST_MODE);&#13;
	payloadJSON.put("deployedExecution", ExecutionUtil.getDynamicProcessProperty("CICD_DEPLOYED_EXECUTION"));&#13;
	&#13;
	if (dataContext!=null)&#13;
		for(int i = 0; i &lt; dataContext.getDataCount(); i++ ) {&#13;
			InputStream is = dataContext.getStream(i);&#13;
			Properties props = dataContext.getProperties(i);&#13;
	//		String text = is.getText().replaceAll("\\r","").replaceAll("\\n","");&#13;
			byte[] docBytes = is.getBytes();&#13;
			def document = new JSONObject();&#13;
			documents.put(document);&#13;
			document.put("docIndex", i);&#13;
			document.put("docContents",  docBytes.encodeBase64().toString());&#13;
			if (CICD_TEST_MODE != "CAPTUREDOCSONLY")&#13;
            {&#13;
    			def propArray = new JSONArray();&#13;
    			document.put("documentProperties", propArray);&#13;
    			Set&lt;String&gt; keys = props.stringPropertyNames();&#13;
    			for (String key : keys) {&#13;
    				def propItem = new JSONObject();&#13;
    				propArray.put(propItem);&#13;
    				propItem.put("propName", key);&#13;
    				String propValue = props.getProperty(key);&#13;
    				if (propValue!=null &amp;&amp; propValue.size()&gt;0)&#13;
    				{&#13;
    					propValue = propValue.bytes.encodeBase64().toString();&#13;
    				} else {&#13;
    					propValue=""&#13;
    				}&#13;
    				propItem.put("propValue", propValue); &#13;
    			}		&#13;
            }&#13;
			def bis = new ByteArrayInputStream(docBytes);&#13;
			dataContext.storeStream(bis, props);&#13;
		}&#13;
&#13;
	if (processProperties!=null)&#13;
    {&#13;
        propArray = new JSONArray();&#13;
	    payloadJSON.put("processProperties", propArray);&#13;
    	for (int i=0; i&lt;processProperties.size(); i++)&#13;
    	{&#13;
			def propItem = new JSONObject();&#13;
			propArray.put(propItem);&#13;
			propItem.put("propName", processProperties[i].propName);&#13;
			String propValue = ExecutionUtil.getDynamicProcessProperty(processProperties[i].propName);&#13;
			if (propValue==null)&#13;
			    propValue = "";&#13;
			else&#13;
			    propValue = propValue.bytes.encodeBase64().toString();&#13;
			propItem.put("propValue", propValue);&#13;
    	}&#13;
    }&#13;
&#13;
	URL url = new URL(urlString);&#13;
	HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#13;
	connection.setRequestMethod("POST");&#13;
	connection.setRequestProperty("Authorization", authenticationHeader);&#13;
	if (_boomi_debug == "true")&#13;
    	connection.setRequestProperty("X-Boomi-Debug", "true");&#13;
	connection.setDoOutput(true);&#13;
	connection.setDoInput(true);&#13;
	&#13;
	byte[] input = payloadJSON.toString().getBytes();&#13;
//	logger.info("Payload length:"+input.length+payloadJSON.toString());&#13;
	connection.setRequestProperty("Content-Length", ""+input.length);&#13;
	connection.getOutputStream().write(input, 0, input.length);  &#13;
    def response="";&#13;
    try {&#13;
        response=connection.getInputStream().getText();&#13;
    } catch (Exception e) {&#13;
		def msg = connection.getResponseCode()+" "+e.toString();&#13;
		if (connection.getErrorStream()!=null)&#13;
		    msg += " " + connection.getErrorStream().getText();&#13;
		msg+=  urlString + " " + connection.getResponseMessage();&#13;
		logger.severe(msg);&#13;
		throw new Exception(msg);&#13;
    }  &#13;
	return response;&#13;
}&#13;
&#13;
def getProcessPropertyNames(String urlString, def authenticationHeader, def logger)&#13;
{&#13;
    //Get processProperties&#13;
    //First get process expected process properties so we can use the names to get and upload them for comparison or query them and upload them for expected&#13;
    logger.info(urlString);&#13;
    URL url = new URL(urlString);&#13;
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();&#13;
    connection.setRequestProperty("Authorization", authenticationHeader);&#13;
    connection.setRequestMethod("GET");&#13;
    def processProperties=null;&#13;
    try {&#13;
        if (connection.getInputStream()!=null)&#13;
        {&#13;
            def resp=connection.getInputStream().getText();&#13;
            if (resp!=null &amp;&amp; resp.size()&gt;0)&#13;
            {&#13;
                def jsonSlurper = new JsonSlurper()&#13;
                payload = jsonSlurper.parseText(resp);&#13;
                logger.info(payload.toString());&#13;
                processProperties=payload.processProperties;&#13;
            }&#13;
        }&#13;
    } catch (Exception e) {&#13;
	    def msg = connection.getResponseCode()+" "+e.toString();&#13;
	    if (connection.getErrorStream()!=null)&#13;
	        msg+=" " + connection.getErrorStream().getText() + " " + urlString + " " + connection.getResponseMessage();&#13;
	    logger.severe(msg);&#13;
	    throw new Exception(msg);&#13;
    }&#13;
	return processProperties;&#13;
}&#13;
</script>
    </ProcessingScript>
  </bns:object>
</bns:Component>
